# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

notes: Processing configuration in BDA project.
assessment:
  default_confidence_threshold: '0.8'
summarization:
  enabled: true
  top_p: '0.1'
  max_tokens: '4096'
  top_k: '5'
  task_prompt: >-
    <document_ocr_data>

    {DOCUMENT_TEXT}

    </document_ocr_data>

    Analyze the provided document (<document_ocr_data>) and create a comprehensive summary.

    CRITICAL INSTRUCTION: You MUST return your response as valid JSON with the
    EXACT structure shown at the end of these instructions. Do not include any
    explanations, notes, or text outside of the JSON structure.

    Create a summary that captures the essential information from the document.
    Your summary should:

    1. Extract key information, main points, and important details

    2. Maintain the original document's organizational structure where
    appropriate

    3. Preserve important facts, figures, dates, and entities

    4. Reduce the length while retaining all critical information

    5. Use markdown formatting for better readability (headings, lists,
    emphasis, etc.)

    6. Cite all relevant facts from the source document using inline citations
    in the format [Cite-X, Page-Y] where X is a sequential citation number and Y
    is the page number

    7. Format citations as markdown links that reference the full citation list
    at the bottom of the summary
      Example: [[Cite-1, Page-3]](#cite-1-page-3)

    8. At the end of the summary, include a "References" section that lists all
    citations with their exact text from the source document in the format:
      [Cite-X, Page-Y]: Exact text from the document

    Output Format:

    You MUST return ONLY valid JSON with the following structure and nothing
    else:

    ```json
    {
      "summary": "A comprehensive summary in markdown format with inline citations linked to a references section at the bottom"
    }
    ```

    Do not include any text, explanations, or notes outside of this JSON
    structure. The JSON must be properly formatted and parseable.
  temperature: '0.0'
  model: us.amazon.nova-premier-v1:0
  system_prompt: >-
    You are a document summarization expert who can analyze and summarize documents from various domains including medical, financial, legal, and general business documents. Your task is to create a summary that captures the key information, main points, and important details from the document. Your output must be in valid JSON format. \nSummarization Style: Balanced\\nCreate a balanced summary that provides a moderate level of detail. Include the main points and key supporting information, while maintaining the document's overall structure. Aim for a comprehensive yet concise summary.\n Your output MUST be in valid JSON format with markdown content. You MUST strictly adhere to the output format specified in the instructions.
evaluation:
  llm_method:
    top_p: '0.1'
    max_tokens: '4096'
    top_k: '5'
    task_prompt: >-
      I need to evaluate attribute extraction for a document of class: {DOCUMENT_CLASS}.


      For the attribute named "{ATTRIBUTE_NAME}" described as "{ATTRIBUTE_DESCRIPTION}":

      - Expected value: {EXPECTED_VALUE}

      - Actual value: {ACTUAL_VALUE}


      Do these values match in meaning, taking into account formatting differences, word order, abbreviations, and semantic equivalence?

      Provide your assessment as a JSON with three fields:

      - "match": boolean (true if they match, false if not)

      - "score": number between 0 and 1 representing the confidence/similarity score

      - "reason": brief explanation of your decision


      Respond ONLY with the JSON and nothing else. Here's the exact format:

      {
        "match": true or false,
        "score": 0.0 to 1.0,
        "reason": "Your explanation here"
      }
    temperature: '0.0'
    model: us.anthropic.claude-3-haiku-20240307-v1:0
    system_prompt: >-
      You are an evaluator that helps determine if the predicted and expected values match for document attribute extraction. You will consider the context and meaning rather than just exact string matching.
discovery:
  output_format:
    sample_json: |-
      {
          "document_class" : "Form-1040",
          "document_description" : "Brief summary of the document",
          "groups" : [
              {
                  "name" : "PersonalInformation",
                  "description" : "Personal information of Tax payer",
                  "attributeType" : "group",
                  "groupAttributes" : [
                      {
                          "name": "FirstName",
                          "dataType" : "string",
                          "description" : "First Name of Taxpayer"
                      },
                      {
                          "name": "Age",
                          "dataType" : "number",
                          "description" : "Age of Taxpayer"
                      }
                  ]
              },
              {
                  "name" : "Dependents",
                  "description" : "Dependents of taxpayer",
                  "attributeType" : "list",
                  "listItemTemplate": {
                      "itemAttributes" : [
                          {
                              "name": "FirstName",
                              "dataType" : "string",
                              "description" : "Dependent first name"
                          },
                          {
                              "name": "Age",
                              "dataType" : "number",
                              "description" : "Dependent Age"
                          }
                      ]
                  }
              }
          ]
      }
  with_ground_truth:
    top_p: '0.1'
    temperature: '1.0'
    user_prompt: >-
      This image contains unstructured data. Analyze the data line by line using the provided ground truth as reference.                        
      <GROUND_TRUTH_REFERENCE>
      {ground_truth_json}
      </GROUND_TRUTH_REFERENCE>
      Ground truth reference JSON has the fields we are interested in extracting from the document/image. Use the ground truth to optimize field extraction. Match field names, data types, and groupings from the reference.
      Image may contain multiple pages, process all pages.
      Extract all field names including those without values.
      Do not change the group name and field name from ground truth in the extracted data json.
      Add field_description field for every field which will contain instruction to LLM to extract the field data from the image/document. Add data_type field for every field. 
      Add two fields document_class and document_description. 
      For document_class generate a short name based on the document content like W4, I-9, Paystub. 
      For document_description generate a description about the document in less than 50 words.
      If the group repeats and follows table format, update the attributeType as "list".                         
      Do not extract the values.
      Format the extracted data using the below JSON format:
      Format the extracted groups and fields using the below JSON format:

    model_id: us.amazon.nova-pro-v1:0
    system_prompt: >-
      You are an expert in processing forms. Extracting data from images and
      documents. Use provided ground truth data as reference to optimize field
      extraction and ensure consistency with expected document structure and
      field definitions.
    max_tokens: '10000'
  without_ground_truth:
    top_p: '0.1'
    temperature: '1.0'
    user_prompt: >-
      This image contains forms data. Analyze the form line by line.
      Image may contains multiple pages, process all the pages. 
      Form may contain multiple name value pair in one line. 
      Extract all the names in the form including the name value pair which doesn't have value. 
      Organize them into groups, extract field_name, data_type and field description
      Field_name should be less than 60 characters, should not have space use '-' instead of space.
      field_description is a brief description of the field and the location of the field like box number or line number in the form and section of the form.
      Field_name should be unique within the group.
      Add two fields document_class and document_description. 
      For document_class generate a short name based on the document content like W4, I-9, Paystub. 
      For document_description generate a description about the document in less than 50 words. 

      Group the fields based on the section they are grouped in the form. Group should have attributeType as "group".
      If the group repeats and follows table format, update the attributeType as "list".
      Do not extract the values.
      Return the extracted data in JSON format.
      Format the extracted data using the below JSON format:
      Format the extracted groups and fields using the below JSON format:
    model_id: us.amazon.nova-pro-v1:0
    system_prompt: >-
      You are an expert in processing forms. Extracting data from images and
      documents. Analyze forms line by line to identify field names, data types,
      and organizational structure. Focus on creating comprehensive blueprints
      for document processing without extracting actual values.
    max_tokens: '10000'
agents:
  error_analyzer:
    model_id: us.anthropic.claude-sonnet-4-20250514-v1:0

    system_prompt: |-
      You are an intelligent error analysis agent for the GenAI IDP system.

      Use the analyze_errors tool to investigate issues. ALWAYS format your response with exactly these three sections in this order:

      ## Root Cause
      Identify the specific underlying technical reason why the error occurred. Focus on the primary cause, not symptoms.

      ## Recommendations
      Provide specific, actionable steps to resolve the issue. Limit to top three recommendations only.

      <details>
      <summary><strong>Evidence</strong></summary>

      Format log entries with their source information. For each log entry, show:
      **Log Group:**  
      [full log_group name from tool response]

      **Log Stream:**  
      [full log_stream name from tool response]
      ```
      [ERROR] timestamp message (from events data)
      ```

      </details>

      FORMATTING RULES:
      - Use the exact three-section structure above
      - Make Evidence section collapsible using HTML details tags
      - Extract log_group, log_stream, and events data from tool response
      - Show complete log group and log stream names without truncation
      - Present actual log messages from events array in code blocks

      RECOMMENDATION GUIDELINES:
      For code-related issues or system bugs:
      - Do not suggest code modifications
      - Include error details, timestamps, and context

      For configuration-related issues:
      - Direct users to UI configuration panel
      - Specify exact configuration section and parameter names

      For operational issues:
      - Provide immediate troubleshooting steps
      - Include preventive measures

      TIME RANGE PARSING:
      - recent/recently: 1 hour
      - last week: 168 hours  
      - last day/yesterday: 24 hours
      - No time specified: 24 hours (default)

      SPECIAL CASES:
      If analysis_type is "document_not_found": explain document cannot be located, focus on verification steps and processing issues.

      DO NOT include code suggestions, technical summaries, or multiple paragraphs of explanation. Keep responses concise and actionable.

      IMPORTANT: Do not include any search quality reflections, search quality scores, or meta-analysis sections in your response. Only provide the three required sections: Root Cause, Recommendations, and Evidence.
    parameters:
      max_log_events: 5
      time_range_hours_default: 24
pricing:
  - name: bda/documents-custom
    units:
      - name: pages
        price: '0.04'
  - name: bda/documents-standard
    units:
      - name: pages
        price: '0.01'
  - name: bedrock/us.amazon.nova-lite-v1:0
    units:
      - name: inputTokens
        price: '6.0E-8'
      - name: outputTokens
        price: '2.4E-7'
      - name: cacheReadInputTokens
        price: '1.5E-8'
      - name: cacheWriteInputTokens
        price: '6.0E-8'
  - name: bedrock/us.amazon.nova-pro-v1:0
    units:
      - name: inputTokens
        price: '8.0E-7'
      - name: outputTokens
        price: '3.2E-6'
      - name: cacheReadInputTokens
        price: '2.0E-7'
      - name: cacheWriteInputTokens
        price: '8.0E-7'
  - name: bedrock/us.amazon.nova-premier-v1:0
    units:
      - name: inputTokens
        price: '2.5E-6'
      - name: outputTokens
        price: '1.25E-5'
  - name: bedrock/us.anthropic.claude-3-haiku-20240307-v1:0
    units:
      - name: inputTokens
        price: '2.5E-7'
      - name: outputTokens
        price: '1.25E-6'
  - name: bedrock/us.anthropic.claude-3-5-haiku-20241022-v1:0
    units:
      - name: inputTokens
        price: '8.0E-7'
      - name: outputTokens
        price: '4.0E-6'
      - name: cacheReadInputTokens
        price: '8.0E-8'
      - name: cacheWriteInputTokens
        price: '1.0E-6'
  - name: bedrock/us.anthropic.claude-3-5-sonnet-20241022-v2:0
    units:
      - name: inputTokens
        price: '3.0E-6'
      - name: outputTokens
        price: '1.5E-5'
      - name: cacheReadInputTokens
        price: '3.0E-7'
      - name: cacheWriteInputTokens
        price: '3.75E-6'
  - name: bedrock/us.anthropic.claude-haiku-4-5-20251001-v1:0
    units:
      - name: inputTokens
        price: '1.1E-06'
      - name: outputTokens
        price: '5.5E-06'
      - name: cacheReadInputTokens
        price: '1.1E-07'
      - name: cacheWriteInputTokens
        price: '1.4E-06'
  - name: bedrock/us.anthropic.claude-3-7-sonnet-20250219-v1:0
    units:
      - name: inputTokens
        price: '3.0E-6'
      - name: outputTokens
        price: '1.5E-5'
      - name: cacheReadInputTokens
        price: '3.0E-7'
      - name: cacheWriteInputTokens
        price: '3.75E-6'
  - name: bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0
    units:
      - name: inputTokens
        price: '3.0E-6'
      - name: outputTokens
        price: '1.5E-5'
      - name: cacheReadInputTokens
        price: '3.0E-7'
      - name: cacheWriteInputTokens
        price: '3.75E-6'
  - name: bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0:1m
    units:
      - name: inputTokens
        price: '6.0E-6'
      - name: outputTokens
        price: '2.25E-5'
      - name: cacheReadInputTokens
        price: '6.0E-7'
      - name: cacheWriteInputTokens
        price: '7.5E-6'
  - name: bedrock/us.anthropic.claude-sonnet-4-5-20250929-v1:0
    units:
      - name: inputTokens
        price: '3.3E-6'
      - name: outputTokens
        price: '1.65E-5'
      - name: cacheReadInputTokens
        price: '3.3E-7'
      - name: cacheWriteInputTokens
        price: '4.125E-6'
  - name: bedrock/us.anthropic.claude-sonnet-4-5-20250929-v1:0:1m
    units:
      - name: inputTokens
        price: '6.6E-6'
      - name: outputTokens
        price: '2.475E-5'
      - name: cacheReadInputTokens
        price: '6.6E-7'
      - name: cacheWriteInputTokens
        price: '8.25E-6'
  - name: bedrock/us.anthropic.claude-opus-4-20250514-v1:0
    units:
      - name: inputTokens
        price: '1.5E-5'
      - name: outputTokens
        price: '7.5E-5'
      - name: cacheReadInputTokens
        price: '1.5E-6'
      - name: cacheWriteInputTokens
        price: '1.875E-5'
  - name: bedrock/us.anthropic.claude-opus-4-1-20250805-v1:0
    units:
      - name: inputTokens
        price: '1.5E-5'
      - name: outputTokens
        price: '7.5E-5'
      - name: cacheReadInputTokens
        price: '1.5E-6'
      - name: cacheWriteInputTokens
        price: '1.875E-5'
  # AWS Lambda pricing (US East - N. Virginia)
  - name: lambda/requests
    units:
      - name: invocations
        price: '2.0E-7'       # $0.0000002 per request ($0.20 per 1M requests)
  - name: lambda/duration  
    units:
      - name: gb_seconds
        price: '1.66667E-5'   # $0.0000166667 per GB-second ($16.67 per 1M GB-seconds)


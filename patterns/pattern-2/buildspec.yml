version: 0.2
phases:
  pre_build:
    commands:
      - echo "Logging into Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI
      - echo "Verifying Docker..."
      - docker --version
      - echo "Setting up Docker buildx for cross-platform builds..."
      - docker buildx create --use --name multiarch-builder --driver docker-container || docker buildx use multiarch-builder
      - docker buildx inspect --bootstrap
  build:
    commands:
      - echo "Building Pattern-2 Docker images..."
      - echo "Using IMAGE_VERSION from environment (content-based hash)"
      - echo "Image tag will be $IMAGE_VERSION"
      - export FUNCTION_ocr="patterns/pattern-2/src/ocr_function"
      - export FUNCTION_classification="patterns/pattern-2/src/classification_function"
      - export FUNCTION_extraction="patterns/pattern-2/src/extraction_function"
      - export FUNCTION_assessment="patterns/pattern-2/src/assessment_function"
      - export FUNCTION_processresults="patterns/pattern-2/src/processresults_function"
      - export FUNCTION_hitl_wait="patterns/pattern-2/src/hitl-wait-function"
      - export FUNCTION_hitl_status_update="patterns/pattern-2/src/hitl-status-update-function"
      - export FUNCTION_hitl_process="patterns/pattern-2/src/hitl-process-function"
      - export FUNCTION_summarization="patterns/pattern-2/src/summarization_function"
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_ocr -t $ECR_URI:ocr-function-$IMAGE_VERSION -t $ECR_URI:ocr-function --platform linux/arm64 --load .
      - docker push $ECR_URI:ocr-function-$IMAGE_VERSION
      - docker push $ECR_URI:ocr-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_classification -t $ECR_URI:classification-function-$IMAGE_VERSION -t $ECR_URI:classification-function --platform linux/arm64 --load .
      - docker push $ECR_URI:classification-function-$IMAGE_VERSION
      - docker push $ECR_URI:classification-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_extraction -t $ECR_URI:extraction-function-$IMAGE_VERSION -t $ECR_URI:extraction-function --platform linux/arm64 --load .
      - docker push $ECR_URI:extraction-function-$IMAGE_VERSION
      - docker push $ECR_URI:extraction-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_assessment -t $ECR_URI:assessment-function-$IMAGE_VERSION -t $ECR_URI:assessment-function --platform linux/arm64 --load .
      - docker push $ECR_URI:assessment-function-$IMAGE_VERSION
      - docker push $ECR_URI:assessment-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_processresults -t $ECR_URI:processresults-function-$IMAGE_VERSION -t $ECR_URI:processresults-function --platform linux/arm64 --load .
      - docker push $ECR_URI:processresults-function-$IMAGE_VERSION
      - docker push $ECR_URI:processresults-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_hitl_wait -t $ECR_URI:hitl-wait-function-$IMAGE_VERSION -t $ECR_URI:hitl-wait-function --platform linux/arm64 --load .
      - docker push $ECR_URI:hitl-wait-function-$IMAGE_VERSION
      - docker push $ECR_URI:hitl-wait-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_hitl_status_update -t $ECR_URI:hitl-status-update-function-$IMAGE_VERSION -t $ECR_URI:hitl-status-update-function --platform linux/arm64 --load .
      - docker push $ECR_URI:hitl-status-update-function-$IMAGE_VERSION
      - docker push $ECR_URI:hitl-status-update-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_hitl_process -t $ECR_URI:hitl-process-function-$IMAGE_VERSION -t $ECR_URI:hitl-process-function --platform linux/arm64 --load .
      - docker push $ECR_URI:hitl-process-function-$IMAGE_VERSION
      - docker push $ECR_URI:hitl-process-function
      - docker buildx build -f Dockerfile.optimized --build-arg FUNCTION_PATH=$FUNCTION_summarization -t $ECR_URI:summarization-function-$IMAGE_VERSION -t $ECR_URI:summarization-function --platform linux/arm64 --load .
      - docker push $ECR_URI:summarization-function-$IMAGE_VERSION
      - docker push $ECR_URI:summarization-function
  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "All Pattern-2 Docker images successfully built and pushed to ECR"
      - echo "ECR Repository - $ECR_URI"
      - echo "Image Version - $IMAGE_VERSION"
      - echo "Waiting for vulnerability scans to complete..."
      - |
        # Wait for and check vulnerability scan results for all images
        IMAGES=("ocr-function" "classification-function" "extraction-function" "assessment-function" "processresults-function" "hitl-wait-function" "hitl-status-update-function" "hitl-process-function" "summarization-function")
        for IMAGE in "${IMAGES[@]}"; do
          echo "Checking scan results for $IMAGE-$IMAGE_VERSION..."
          # Wait for scan to complete (max 10 minutes)
          for i in {1..60}; do
            SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name $(basename $ECR_URI) --image-id imageTag=$IMAGE-$IMAGE_VERSION --region $AWS_REGION --query 'imageScanStatus.status' --output text 2>/dev/null || echo "IN_PROGRESS")
            if [ "$SCAN_STATUS" = "COMPLETE" ]; then
              echo "Scan completed for $IMAGE-$IMAGE_VERSION"
              # Get vulnerability counts
              CRITICAL=$(aws ecr describe-image-scan-findings --repository-name $(basename $ECR_URI) --image-id imageTag=$IMAGE-$IMAGE_VERSION --region $AWS_REGION --query 'imageScanFindings.findingCounts.CRITICAL' --output text 2>/dev/null || echo "0")
              HIGH=$(aws ecr describe-image-scan-findings --repository-name $(basename $ECR_URI) --image-id imageTag=$IMAGE-$IMAGE_VERSION --region $AWS_REGION --query 'imageScanFindings.findingCounts.HIGH' --output text 2>/dev/null || echo "0")
              echo "Vulnerabilities found in $IMAGE-$IMAGE_VERSION: CRITICAL=$CRITICAL, HIGH=$HIGH"
              # Fail build if critical vulnerabilities found
              if [ "$CRITICAL" != "0" ] && [ "$CRITICAL" != "None" ]; then
                echo "ERROR: Critical vulnerabilities found in $IMAGE-$IMAGE_VERSION. Build failed."
                exit 1
              fi
              break
            elif [ "$SCAN_STATUS" = "FAILED" ]; then
              echo "WARNING: Vulnerability scan failed for $IMAGE-$IMAGE_VERSION"
              break
            fi
            echo "Scan in progress for $IMAGE-$IMAGE_VERSION... (attempt $i/60)"
            sleep 10
          done
          if [ "$SCAN_STATUS" != "COMPLETE" ]; then
            echo "WARNING: Scan did not complete within timeout for $IMAGE-$IMAGE_VERSION"
          fi
        done
      - echo "Vulnerability scanning completed for all images"

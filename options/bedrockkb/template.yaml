# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS GenAI IDP Accelerator - Bedrock Knowledge Base setup

Parameters:

  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - DEBUG
      - INFO
      - WARN
      - ERROR
      - CRITICAL
    Description: Default logging level for Lambda functions

  pCustomerManagedEncryptionKeyArn:
    Type: String
    Description: Enter the ARN of the customer managed key.

  pVectorStoreType:
    Type: String
    Default: OPENSEARCH_SERVERLESS
    AllowedValues:
      - OPENSEARCH_SERVERLESS
      - S3_VECTORS
    Description: Choose vector store type for Bedrock Knowledge Base. OpenSearch Serverless (default) for sub-millisecond queries, S3 Vectors for cost-effective storage with sub-second latency.

  pS3VectorBucketName:
    Type: String
    Default: ""
    Description: >-
      Name for S3 vector bucket (auto-generated if empty). Only used when pVectorStoreType is S3_VECTORS.

  pS3VectorIndexName:
    Type: String
    Default: "bedrock-kb-index"
    Description: >-
      Name for S3 vector index. Only used when pVectorStoreType is S3_VECTORS.


  pKnowledgeBaseBucketName:
    Type: String
    Default: ""
    Description: >-
      Enter the bucket name of an existing bucket with documents to ingest, or leave blank if you don't need an S3 data source.

  pInputDocumentUploadFolderPrefix:
    Type: String
    Default: ""
    Description: >-
      Comma separated list of S3 prefixes with path to your source documents e.g. "my/documents/here/", "prefix1/, prefix2/"

  pS3SyncScheduleExpression:
    Type: String
    Default: "cron(0 0 * * ? *)"
    Description: >-
      Enter a schedule expression for when the S3 sync should be triggered. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html for examples.

  pWebCrawlerURLs:
    Type: String
    Default: ""
    Description: >-
      Comma separated list of public web sites to crawl, or leave blank if you don't need a Web data source.

  pWebCrawlerScope:
    Type: String
    AllowedValues:
      - "DEFAULT"
      - "HOST_ONLY"
      - "SUBDOMAINS"
    Default: DEFAULT
    Description: >-
      The scope of what is crawled for your URLs.
      Choose DEFAULT to limit to web pages that have the same host and the same initial path as the source URLs.
      Choose HOST_ONLY to limit to web pages that have the same host as the source URLs.
      Choose SUBDOMAINS to to include sub domains in addition to the host or primary domain.

  pWebSyncScheduleExpression:
    Type: String
    Default: "cron(0 0 * * ? *)"
    Description: >-
      Enter a schedule expression for when the Web sync should be triggered, or leave blank for no sync. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html for examples.

  pEmbedModel:
    Type: String
    AllowedValues:
      - amazon.titan-embed-text-v2:0
      - cohere.embed-english-v3
      - cohere.embed-multilingual-v3
    Default: amazon.titan-embed-text-v2:0
    Description: >-
      Embedding models available on Amazon Bedrock

  pChunkingStrategy:
    Type: String
    AllowedValues:
      - Default chunking
      - Fixed-size chunking
      - No chunking
    Default: Fixed-size chunking
    Description: >-
      Chunking breaks down the text into smaller segments before embedding. The chunking strategy can't be modified after you create the Knowledge Base

  pMaxTokens:
    Type: Number
    MinValue: 20
    MaxValue: 8192
    Default: 300
    Description: >-
      Maximum number of tokens per chunk (between 20 and 8192 tokens)

  pOverlapPercentage:
    Type: Number
    MinValue: 1
    MaxValue: 99
    Default: 15
    Description: >-
      Approximate percentage of overlapped tokens between two consecutive chunks (typical overlap is around 10% - 20%)

  pIndexName:
    Type: String
    MinLength: 1
    MaxLength: 63
    Default: bedrock-knowledge-base-default-index
    AllowedPattern: ^[a-z0-9](-*[a-z0-9])*
    ConstraintDescription: Must be lowercase or numbers with a length of 1-63 characters

  pVectorFieldName:
    Type: String
    Default: bedrock-knowledge-base-default-vector

  pMetaDataFieldName:
    Type: String
    Default: AMAZON_BEDROCK_METADATA

  pTextFieldName:
    Type: String
    Default: AMAZON_BEDROCK_TEXT_CHUNK

  PermissionsBoundaryArn:
    Type: String
    Default: ""
    Description: >-
      (Optional) ARN of an existing IAM Permissions Boundary policy to attach to all IAM roles.
      Required by some organizations with Service Control Policies (SCPs).
      Format: arn:${AWS::Partition}:iam::account-id:policy/policy-name
      Leave blank if no Permissions Boundary is required.
    AllowedPattern: "^(|arn:aws[a-z-]*:iam::[0-9]{12}:policy/.+)$"
    ConstraintDescription: Must be empty or a valid IAM policy ARN

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Vector Store Configuration
        Parameters:
          - pVectorStoreType
          - pS3VectorBucketName
          - pS3VectorIndexName
      - Label:
          default: Knowledge Base Data Sources
        Parameters:
          - pCustomerManagedEncryptionKeyArn
          - pKnowledgeBaseBucketName
          - pInputDocumentUploadFolderPrefix
          - pS3SyncScheduleExpression
          - pWebCrawlerURLs
          - pWebCrawlerScope
          - pWebSyncScheduleExpression
      - Label:
          default: Embedding Model
        Parameters:
          - pEmbedModel
      - Label:
          default: Document Chunking
        Parameters:
          - pChunkingStrategy
          - pMaxTokens
          - pOverlapPercentage
      - Label:
          default: Index Details
        Parameters:
          - pIndexName
          - pVectorFieldName
          - pMetaDataFieldName
          - pTextFieldName

    ParameterLabels:
      pVectorStoreType:
        default: Vector Store Type
      pS3VectorBucketName:
        default: S3 Vector Bucket Name (S3 Vectors only)
      pS3VectorIndexName:
        default: S3 Vector Index Name (S3 Vectors only)
      pCustomerManagedEncryptionKeyArn:
        default: Customer Managed Key ARN
      pKnowledgeBaseBucketName:
        default: Existing S3 bucket with knowledge base source documents (optional).
      pInputDocumentUploadFolderPrefix:
        default: S3 prefix(es) for your content (optional)
      pS3SyncScheduleExpression:
        default: S3 sync schedule expression
      pWebCrawlerURLs:
        default: Publicly accessible URLs for web crawling (optional)
      pWebCrawlerScope:
        default: Web crawl sync scope
      pWebSyncScheduleExpression:
        default: Web sync schedule expression
      pEmbedModel:
        default: Choose an embedding model
      pChunkingStrategy:
        default: Choose a chunking strategy (default, fixed-size, or none)
      pMaxTokens:
        default: For fixed-size chunking, choose a maximum number of tokens per chunk
      pOverlapPercentage:
        default: For fixed-size chunking, choose an overlap percentage between chunks
      pIndexName:
        default: Index name to be created in the vector store
      pVectorFieldName:
        default: Vector field name
      pMetaDataFieldName:
        default: Metadata field name
      pTextFieldName:
        default: Text field name

Conditions:
  IsCustomerManagedKey:
    Fn::Not:
      - Fn::Equals:
          - Ref: pCustomerManagedEncryptionKeyArn
          - ""
  IsS3DataSource:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: pKnowledgeBaseBucketName
  IsWebDataSource:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: pWebCrawlerURLs
  HasWebCrawlerScope:
    Fn::Not:
      - Fn::Equals:
          - DEFAULT
          - Ref: pWebCrawlerScope
  HasInputDocumentUploadFolderPrefix:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: pInputDocumentUploadFolderPrefix
  IsChunkingStrategyFixed:
    Fn::Equals:
      - Ref: pChunkingStrategy
      - Fixed-size chunking
  IsChunkingStrategyDefault:
    Fn::Equals:
      - Ref: pChunkingStrategy
      - Default chunking
  IsChunkingStrategyNoChunking:
    Fn::Equals:
      - Ref: pChunkingStrategy
      - No chunking
  IsChunkingStrategyFixedOrDefault:
    Fn::Or:
      - Condition: IsChunkingStrategyFixed
      - Condition: IsChunkingStrategyDefault
  HasPermissionsBoundary: !Not [!Equals [!Ref PermissionsBoundaryArn, ""]]
  UseS3Vectors: !Equals [!Ref pVectorStoreType, "S3_VECTORS"]
  UseOpenSearchServerless: !Equals [!Ref pVectorStoreType, "OPENSEARCH_SERVERLESS"]
  HasS3VectorBucketName: !Not [!Equals [!Ref pS3VectorBucketName, ""]]

Resources:
  # Custom resource to transform input to lowercase.
  GetAdjustedStackNameFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Function does not require VPC access as it only interacts with AWS services via APIs"
          - id: W92
            reason: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_116: "DLQ not required for Cfn Custom Resource function"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    Properties:
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Handler: index.handler
      Runtime: python3.12
      Timeout: 30
      InlineCode: |
        import cfnresponse
        import time
        import os
        import logging
        
        # Get logging level from environment variable with INFO as default
        log_level = os.environ.get('LOG_LEVEL', 'INFO')
        logger = logging.getLogger()
        logger.setLevel(getattr(logging, log_level))
        
        def handler(event, context):
            logger.info(event)  
            output = event['ResourceProperties'].get('InputString', '').lower()
            output = output[:32]
            responseData = {'OutputString': output}                                            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel

  AdjustedStackName:
    Type: Custom::GetLowercase
    Properties:
      ServiceToken: !GetAtt GetAdjustedStackNameFunction.Arn
      InputString: !Ref AWS::StackName

  # Custom resource to transform comma separated url list to an array of url objects for Web Crawler.
  GetSeedUrlsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Function does not require VPC access as it only interacts with AWS services via APIs"
          - id: W92
            reason: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_116: "DLQ not required for Cfn Custom Resource function"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    Properties:
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Handler: index.handler
      Runtime: python3.12
      Timeout: 30
      InlineCode: |
        import cfnresponse
        import time
        import os
        import logging
        
        # Get logging level from environment variable with INFO as default
        log_level = os.environ.get('LOG_LEVEL', 'INFO')
        logger = logging.getLogger()
        logger.setLevel(getattr(logging, log_level))
        
        def handler(event, context):
          logger.info(event)
          urls = event['ResourceProperties'].get('WebCrawlerURLs', '').split(',')
          seedUrls = [{'Url': url.strip()} for url in urls]
          responseData = {'SeedUrls': seedUrls}
          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel

  GetSeedUrls:
    Type: Custom::GetSeedUrls
    Properties:
      ServiceToken: !GetAtt GetSeedUrlsFunction.Arn
      WebCrawlerURLs: !Ref pWebCrawlerURLs

  #
  # S3 Vectors Custom Resource for creating vector bucket and index
  #
  S3VectorManagerRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Specified permissions do not appy to specific resources
    Condition: UseS3Vectors
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Policies:
        - PolicyName: S3VectorsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3vectors:CreateVectorBucket
                  - s3vectors:DeleteVectorBucket
                  - s3vectors:GetVectorBucket
                  - s3vectors:ListVectorBuckets
                  - s3vectors:CreateIndex
                  - s3vectors:DeleteIndex
                  - s3vectors:GetIndex
                  - s3vectors:ListIndexes
                  - s3vectors:PutVectors
                  - s3vectors:GetVectors
                  - s3vectors:QueryVectors
                  - s3vectors:DeleteVectors
                Resource: "*"
        - PolicyName: BedrockAgentAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:CreateKnowledgeBase
                  - bedrock:DeleteKnowledgeBase
                  - bedrock:GetKnowledgeBase
                  - bedrock:UpdateKnowledgeBase
                  - bedrock:ListKnowledgeBases
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"
        - !If
          - IsCustomerManagedKey
          - PolicyName: KMSAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:ReEncrypt*
                    - kms:GenerateDataKey*
                    - kms:DescribeKey
                  Resource: !Ref pCustomerManagedEncryptionKeyArn
          - !Ref "AWS::NoValue"

  S3VectorManagerFunction:
    Type: AWS::Serverless::Function
    Condition: UseS3Vectors
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Function does not require VPC access as it only interacts with AWS services via APIs"
          - id: W92
            reason: "Function does not require reserved concurrency as it scales based on demand"
          - id: W58
            reason: "DLQ not required for Cfn Custom Resource function"
    # checkov:skip=CKV_AWS_116: "DLQ not required for Cfn Custom Resource function"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    Properties:
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Handler: handler.lambda_handler
      Role: !GetAtt S3VectorManagerRole.Arn
      Runtime: python3.12
      Timeout: 600
      MemorySize: 512
      CodeUri: ./src/s3_vectors_manager
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel

  S3VectorBucketAndIndex:
    Type: Custom::S3VectorBucketAndIndex
    Condition: UseS3Vectors
    Properties:
      ServiceToken: !GetAtt S3VectorManagerFunction.Arn
      BucketName: !If
        - HasS3VectorBucketName
        - !Ref pS3VectorBucketName
        - !Sub "${AWS::StackName}-s3-vectors"
      IndexName: !Ref pS3VectorIndexName
      EmbeddingModel: !Ref pEmbedModel
      Region: !Ref AWS::Region
      KmsKeyArn: !If [IsCustomerManagedKey, !Ref pCustomerManagedEncryptionKeyArn, !Ref "AWS::NoValue"]
      VectorDimension: 1024
      DistanceMetric: "cosine"
      MetadataConfiguration:
        nonFilterableMetadataKeys:
          - "AMAZON_BEDROCK_METADATA"
          - "AMAZON_BEDROCK_TEXT"

  #
  # OpenSearch Serverless resources (only when using OpenSearch)
  #
  OSSCollection:
    Type: AWS::OpenSearchServerless::Collection
    Condition: UseOpenSearchServerless
    Properties:
      Name: !Sub "${AdjustedStackName.OutputString}"
      Type: VECTORSEARCH
      Description: Bedrock Knowledge Base collection
    DependsOn: OSSEncryptionPolicy

  OSSEncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Condition: UseOpenSearchServerless
    Properties:
      Name: !Sub "${AdjustedStackName.OutputString}"
      Type: encryption
      Description: Encryption policy for Bedrock Knowledge Base collection
      Policy: !Sub
        - '{"Rules":[{"ResourceType":"collection","Resource":["collection/${CollName}"]}],"AWSOwnedKey":true}'
        - CollName: !Sub "${AdjustedStackName.OutputString}"

  OSSNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Condition: UseOpenSearchServerless
    DependsOn:
      - OSSEncryptionPolicy
    Properties:
      Name: !Sub "${AdjustedStackName.OutputString}"
      Type: network
      Policy: !Sub
        - '[{"Description": "Public access for Bedrock Knowledge Base collection",
          "Rules": [{"ResourceType": "dashboard", "Resource": ["collection/${CollName}"]},
          {"ResourceType": "collection", "Resource": ["collection/${CollName}"]}],
          "AllowFromPublic": true}]'
        - CollName: !Sub "${AdjustedStackName.OutputString}"

  OSSDataAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Condition: UseOpenSearchServerless
    DependsOn:
      - OSSNetworkPolicy
    Properties:
      Name: !Sub "${AdjustedStackName.OutputString}"
      Type: data
      Policy: !Sub
        - '[{"Rules": [{"Resource": ["collection/${CollName}"], "Permission":
          ["aoss:CreateCollectionItems", "aoss:UpdateCollectionItems", "aoss:DescribeCollectionItems"],
          "ResourceType": "collection"}, {"ResourceType": "index", "Resource": ["index/${CollName}/*"],
          "Permission": ["aoss:CreateIndex", "aoss:DescribeIndex", "aoss:ReadDocument",
          "aoss:WriteDocument", "aoss:UpdateIndex", "aoss:DeleteIndex"]}],
          "Principal": ["${ServiceRoleArn}"]}]'
        - CollName: !Sub "${AdjustedStackName.OutputString}"
          ServiceRoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${KnowledgeBaseServiceRole}"

  OpenSearchLambdaExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Specified permissions do not appy to specific resources
    Condition: UseOpenSearchServerless
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub "lambda.${AWS::URLSuffix}"
          Action:
          - sts:AssumeRole
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Policies:
      - PolicyName: OSSLambdaRoleDefaultPolicy # Reference: https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsx-ray.html
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
            Resource: '*'
      - PolicyName: AllowLambdaLogs # Reference: https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazoncloudwatchlogs.html
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
      - PolicyName: AllowS3 # Reference: https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject*
            - s3:GetObject*
            - s3:DeleteObject*
            Resource:
              Fn::Sub: arn:${AWS::Partition}:s3:::*
      - PolicyName: AOSSPermissionsPart1 # References: https://docs.aws.amazon.com/opensearch-service/latest/developerguide/security-iam-serverless.html, https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonopensearchserverless.html
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - aoss:BatchGetCollection
            - aoss:CreateSecurityPolicy
            - aoss:CreateAccessPolicy
            - aoss:UpdateAccessPolicy
            - aoss:ListCollections
            - aoss:GetAccessPolicy
            - aoss:ListCollections
            - aoss:CreateCollection
            Resource: '*'                      # no resource specification applicable
      - PolicyName: AOSSPermissionsPart2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - aoss:DeleteCollection
            - aoss:UpdateCollection
            - aoss:APIAccessAll
            Resource:
              Fn::Sub: arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*

  CreateOSSIndexLambdaFunction:
    Type: AWS::Serverless::Function
    Condition: UseOpenSearchServerless
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Function does not require VPC access as it only interacts with AWS services via APIs"
          - id: W92
            reason: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_116: "DLQ not required for Cfn Custom Resource function"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    Properties:
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Handler: oss_handler.lambda_handler
      MemorySize: 1024
      Role: !GetAtt OpenSearchLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 840
      CodeUri: ./src/opensearch_index_custom_resource
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: InfraSetupLambda
          POWERTOOLS_METRICS_NAMESPACE: InfraSetupLambda-NameSpace
          POWERTOOLS_LOG_LEVEL: !Ref LogLevel

  InvokeCreateOSSIndexLambdaFunction:
    Type: Custom::InvokeCreateOSSIndexLambdaFunction
    Condition: UseOpenSearchServerless
    DependsOn:
    - CreateOSSIndexLambdaFunction
    - OSSDataAccessPolicy
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CreateOSSIndexLambdaFunction.Arn
      collection_endpoint: !GetAtt OSSCollection.CollectionEndpoint
      data_access_policy_name: !Sub "${AdjustedStackName.OutputString}"
      index_name:
        Ref: pIndexName
      embedding_model_id:
        Ref: pEmbedModel
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  #
  # IAM Role used by the Bedrock service to access S3, OpenSearch, and embedding models
  #
  KnowledgeBaseServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "bedrock.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
              ArnLike:
                aws:SourceArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*"
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Policies:
        - PolicyName: bedrock-invoke-model
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: BedrockInvokeModel
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/${pEmbedModel}"
        - !If
          - UseOpenSearchServerless
          - PolicyName: oss-api-access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: OpenSearchServerlessAPIAccessAll
                  Effect: Allow
                  Action:
                    - aoss:APIAccessAll
                  Resource: !GetAtt OSSCollection.Arn
          - !Ref "AWS::NoValue"
        - !If
          - UseS3Vectors
          - PolicyName: s3-vectors-access
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: S3VectorsAccess
                  Effect: Allow
                  Action:
                    - s3vectors:GetIndex
                    - s3vectors:QueryVectors
                    - s3vectors:PutVectors
                    - s3vectors:GetVectors
                    - s3vectors:DeleteVectors
                  Resource: !GetAtt S3VectorBucketAndIndex.IndexArn
          - !Ref "AWS::NoValue"
        - !If
          - IsS3DataSource
          - PolicyName: s3-read-objects
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: S3ListBucket
                  Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource: !If
                    - UseS3Vectors
                    - - !Sub "arn:${AWS::Partition}:s3:::${pKnowledgeBaseBucketName}"
                      - !GetAtt S3VectorBucketAndIndex.BucketArn
                    - - !Sub "arn:${AWS::Partition}:s3:::${pKnowledgeBaseBucketName}"
                - Sid: S3GetObject
                  Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: !If
                    - UseS3Vectors
                    - - !Sub "arn:${AWS::Partition}:s3:::${pKnowledgeBaseBucketName}/*"
                      - !GetAtt S3VectorBucketAndIndex.BucketArn
                    - - !Sub "arn:${AWS::Partition}:s3:::${pKnowledgeBaseBucketName}/*"
          - !Ref "AWS::NoValue"
        - !If
          - IsCustomerManagedKey
          - PolicyName: kms-key
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:ReEncrypt*
                    - kms:GenerateDataKey*
                    - kms:DescribeKey
                  Resource: !Ref pCustomerManagedEncryptionKeyArn
          - !Ref "AWS::NoValue"

  #
  # Unified Bedrock Knowledge Base resource (uses CloudFormation or Custom Resource based on vector store type)
  #
  KnowledgeBaseOpenSearchNative:
    Type: AWS::Bedrock::KnowledgeBase
    Condition: UseOpenSearchServerless
    DependsOn:
      - InvokeCreateOSSIndexLambdaFunction
    Properties:
      Description: Bedrock Knowledge Base with OpenSearch Serverless
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn:
            Fn::Sub: arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/${pEmbedModel}
      Name: !Sub "${AWS::StackName}-OpenSearchServerless"
      RoleArn: !GetAtt KnowledgeBaseServiceRole.Arn
      StorageConfiguration:
        Type: OPENSEARCH_SERVERLESS
        OpensearchServerlessConfiguration:
          CollectionArn: !GetAtt OSSCollection.Arn
          FieldMapping:
            MetadataField:
              Ref: pMetaDataFieldName
            TextField:
              Ref: pTextFieldName
            VectorField:
              Ref: pVectorFieldName
          VectorIndexName:
            Ref: pIndexName

  KnowledgeBaseS3VectorsCustom:
    Type: Custom::S3VectorsKnowledgeBase
    Condition: UseS3Vectors
    DependsOn:
      - S3VectorBucketAndIndex
    Properties:
      ServiceToken: !GetAtt S3VectorManagerFunction.Arn
      ResourceType: S3VectorsKnowledgeBase
      Name: !Sub "${AWS::StackName}-S3Vectors"
      Description: "Bedrock Knowledge Base with S3 Vectors"
      RoleArn: !GetAtt KnowledgeBaseServiceRole.Arn
      EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/${pEmbedModel}"
      IndexArn: !GetAtt S3VectorBucketAndIndex.IndexArn
      Region: !Ref AWS::Region
      KmsKeyArn: !If [IsCustomerManagedKey, !Ref pCustomerManagedEncryptionKeyArn, !Ref "AWS::NoValue"]

  # Unified Knowledge Base reference for data sources and other resources
  KnowledgeBase:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-KnowledgeBaseId"
      Type: String
      Value: !If
        - UseS3Vectors
        - !GetAtt KnowledgeBaseS3VectorsCustom.KnowledgeBaseId
        - !Ref KnowledgeBaseOpenSearchNative
      Description: Unified Knowledge Base ID for resource references

  S3DataSource:
    Type: AWS::Bedrock::DataSource
    Condition: IsS3DataSource
    DependsOn:
      - KnowledgeBase
    Properties:
      DataDeletionPolicy: DELETE
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn:
            Fn::Sub: arn:${AWS::Partition}:s3:::${pKnowledgeBaseBucketName}
          InclusionPrefixes:
            Fn::If:
              - HasInputDocumentUploadFolderPrefix
              - !Split [",", Ref: pInputDocumentUploadFolderPrefix]
              - Ref: AWS::NoValue
      Description: S3 Knowledge Base Data Source
      KnowledgeBaseId: !GetAtt KnowledgeBase.Value
      Name: !Sub "S3KBDataSource-${AWS::StackName}"
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy:
            Fn::If:
              - IsChunkingStrategyFixedOrDefault
              - FIXED_SIZE
              - NONE
          FixedSizeChunkingConfiguration:
            Fn::If:
              - IsChunkingStrategyFixedOrDefault
              - MaxTokens:
                  Fn::If:
                    - IsChunkingStrategyFixed
                    - Ref: pMaxTokens
                    - Fn::If:
                        - IsChunkingStrategyDefault
                        - 300
                        - Ref: AWS::NoValue
                OverlapPercentage:
                  Fn::If:
                    - IsChunkingStrategyFixed
                    - Ref: pOverlapPercentage
                    - Fn::If:
                        - IsChunkingStrategyDefault
                        - 20
                        - Ref: AWS::NoValue
              - Ref: AWS::NoValue

  WebDataSource:
    Type: AWS::Bedrock::DataSource
    Condition: IsWebDataSource
    DependsOn:
      - KnowledgeBase
    Properties:
      DataDeletionPolicy: DELETE
      DataSourceConfiguration:
        Type: WEB
        WebConfiguration:
          CrawlerConfiguration:
            CrawlerLimits:
              RateLimit: 300
            Scope: !If
              - HasWebCrawlerScope
              - Ref: pWebCrawlerScope
              - Ref: AWS::NoValue
          SourceConfiguration:
            UrlConfiguration:
              SeedUrls: !GetAtt GetSeedUrls.SeedUrls
      Description: Web Knowledge Base Data Source
      KnowledgeBaseId: !GetAtt KnowledgeBase.Value
      Name: !Sub "WebKBDataSource-${AWS::StackName}"
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy:
            Fn::If:
              - IsChunkingStrategyFixedOrDefault
              - FIXED_SIZE
              - NONE
          FixedSizeChunkingConfiguration:
            Fn::If:
              - IsChunkingStrategyFixedOrDefault
              - MaxTokens:
                  Fn::If:
                    - IsChunkingStrategyFixed
                    - Ref: pMaxTokens
                    - Fn::If:
                        - IsChunkingStrategyDefault
                        - 300
                        - Ref: AWS::NoValue
                OverlapPercentage:
                  Fn::If:
                    - IsChunkingStrategyFixed
                    - Ref: pOverlapPercentage
                    - Fn::If:
                        - IsChunkingStrategyDefault
                        - 20
                        - Ref: AWS::NoValue
              - Ref: AWS::NoValue

  # Start sync jobs for datasources
  StartIngestionJobFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:StartIngestionJob"
                Resource:
                  - !Sub "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:knowledge-base/${KnowledgeBase.Value}"
          PolicyName: BedrockPolicy

  StartIngestionJobFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Function does not require VPC access as it only interacts with AWS services via APIs"
          - id: W92
            reason: "Function does not require reserved concurrency as it scales based on demand"
          - id: W58
            reason: "DLQ not required for Cfn Custom Resource function"
    # checkov:skip=CKV_AWS_116: "DLQ not required for Cfn Custom Resource function"
    # checkov:skip=CKV_AWS_117: "Function does not require VPC access as it only interacts with AWS services via APIs"
    # checkov:skip=CKV_AWS_115: "Function does not require reserved concurrency as it scales based on demand"
    # checkov:skip=CKV_AWS_173: "Environment variables do not contain sensitive data - only configuration values like feature flags and non-sensitive settings"
    Properties:
      Handler: handler.lambda_handler
      Role: !GetAtt "StartIngestionJobFunctionRole.Arn"
      Runtime: python3.12
      Timeout: 600
      MemorySize: 128
      Code: ./src/start_ingestion_job_custom_resource
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel

  StartWebIngestionJob:
    Type: AWS::CloudFormation::CustomResource
    Condition: IsWebDataSource
    DependsOn:
      - KnowledgeBase
    Properties:
      ServiceToken: !GetAtt StartIngestionJobFunction.Arn
      knowledgeBaseId: !GetAtt KnowledgeBase.Value
      dataSourceId: !GetAtt WebDataSource.DataSourceId

  StartS3IngestionJob:
    Type: AWS::CloudFormation::CustomResource
    Condition: IsS3DataSource
    DependsOn:
      - KnowledgeBase
    Properties:
      ServiceToken: !GetAtt StartIngestionJobFunction.Arn
      knowledgeBaseId: !GetAtt KnowledgeBase.Value
      dataSourceId: !GetAtt S3DataSource.DataSourceId

  # EventBridge schedulers for data sources
  S3DataSourceScheduler:
    Type: AWS::Scheduler::Schedule
    Condition: IsS3DataSource
    DependsOn:
      - KnowledgeBase
    Properties:
      Description: "Rule to start Bedrock KB S3 datasource ingestion job on a schedule"
      FlexibleTimeWindow: 
        Mode: "OFF"
      ScheduleExpression: !Ref pS3SyncScheduleExpression
      ScheduleExpressionTimezone: "UTC"
      State: "ENABLED"
      Target:
        Arn: !Sub "arn:${AWS::Partition}:scheduler:::aws-sdk:bedrockagent:startIngestionJob"
        RoleArn: !GetAtt  DataSourceSchedulerRole.Arn
        Input: !Sub
          - |
            {
              "DataSourceId": "${S3DataSource.DataSourceId}",
              "KnowledgeBaseId": "${KnowledgeBaseId}"
            }
          - KnowledgeBaseId: !GetAtt KnowledgeBase.Value

  WebDataSourceScheduler:
    Type: AWS::Scheduler::Schedule
    Condition: IsWebDataSource
    DependsOn:
      - KnowledgeBase
    Properties:
      Description: "Rule to start Bedrock KB Web datasource ingestion job on a schedule"
      FlexibleTimeWindow: 
        Mode: "OFF"
      ScheduleExpression: !Ref pWebSyncScheduleExpression
      ScheduleExpressionTimezone: "UTC"
      State: "ENABLED"
      Target:
        Arn: !Sub "arn:${AWS::Partition}:scheduler:::aws-sdk:bedrockagent:startIngestionJob"
        RoleArn: !GetAtt  DataSourceSchedulerRole.Arn
        Input: !Sub
          - |
            {
              "DataSourceId": "${WebDataSource.DataSourceId}",
              "KnowledgeBaseId": "${KnowledgeBaseId}"
            }
          - KnowledgeBaseId: !GetAtt KnowledgeBase.Value

  DataSourceSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "scheduler.${AWS::URLSuffix}"
            Action: sts:AssumeRole
      PermissionsBoundary: !If [HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref AWS::NoValue]
      Policies:
        - PolicyName: BedrockAgentStartIngestionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:StartIngestionJob"
                Resource:
                  - !Sub
                    - "arn:${AWS::Partition}:bedrock:*:${AWS::AccountId}:knowledge-base/${KnowledgeBaseId}"
                    - KnowledgeBaseId: !GetAtt KnowledgeBase.Value

Outputs:
  KnowledgeBaseS3BucketName:
    Value: !Ref pKnowledgeBaseBucketName
    Description: Knowledge Base S3 data source bucket name
  KnowledgeBaseWebCrawlerUrls:
    Value: !Ref pWebCrawlerURLs
    Description: Knowledge Base Web Crawler data source urls
  KnowledgeBaseID:
    Value: !GetAtt KnowledgeBase.Value
    Description: Knowledge Base ID
  KnowledgeBaseVectorStore:
    Value: !Ref pVectorStoreType
    Description: Knowledge Base vector store type
  S3VectorBucketName:
    Condition: UseS3Vectors
    Value: !If
      - HasS3VectorBucketName
      - !Ref pS3VectorBucketName
      - !Sub "${AWS::StackName}-s3-vectors"
    Description: S3 Vector bucket name (S3 Vectors only)
  S3VectorBucketArn:
    Condition: UseS3Vectors
    Value: !If
      - UseS3Vectors
      - !GetAtt S3VectorBucketAndIndex.BucketArn
      - ""
    Description: S3 Vector bucket ARN (S3 Vectors only)
  OpenSearchCollectionName:
    Condition: UseOpenSearchServerless
    Value: !Ref OSSCollection
    Description: OpenSearch collection
  OpenSearchCollectionArn:
    Condition: UseOpenSearchServerless
    Value: !GetAtt OSSCollection.Arn
    Description: OpenSearch collection ARN
  OpenSearchCollectionEndpoint:
    Condition: UseOpenSearchServerless
    Value: !GetAtt OSSCollection.CollectionEndpoint
    Description: OpenSearch collection endpoint
  OpenSearchCollectionDashboard:
    Condition: UseOpenSearchServerless
    Value: !GetAtt OSSCollection.DashboardEndpoint
    Description: OpenSearch collection dashboard endpoint
